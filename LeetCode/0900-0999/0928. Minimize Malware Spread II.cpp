class UnionFind {
  public:
    UnionFind(int n) : father_(n), size_(n, 1), count(n) {
        for (int i = 0; i < father_.size(); ++i) {
            father_[i] = i;
        }
    }
    void connect(int a, int b) {
        if (a > b) { swap(a, b); }
        int ra = root(a);
        int rb = root(b);
        if (ra != rb) {
            father_[rb] = ra;
            size_[ra] += size_[rb];
            // TODO: process `data` here.
            count--;
        }
    }
    int root(int x) {
        if (father_[x] == x) { return x; } 
        else { return father_[x] = root(father_[x]); }
    }
    int getSize(int x) {
        return size_[root(x)];
    }
    unordered_map<int, vector<int>> getComponents() {
        unordered_map<int, vector<int>> result;
        for (int i = 0; i < father_.size(); i++) {
            result[root(i)].push_back(i);
        }
        return result;
    }

    int count;        // Number of distinct component.

  private:
    vector<int> father_;
    vector<int> size_; // Store count of the component.
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        set<int> initial_malware(initial.begin(), initial.end());

        UnionFind uf(graph.size());
        for (int i = 0; i < graph.size(); i++) {
            if (initial_malware.find(i) != initial_malware.end()) {
                continue;
            }
            for (int j = i + 1; j < graph[i].size(); j++) {
                if (initial_malware.find(j) != initial_malware.end()) {
                    continue;
                }
                if (graph[i][j] == 1) {
                    uf.connect(i, j);
                }
            }
        }

        unordered_map<int, unordered_set<int>> root_to_malware;
        for (int malware : initial) {
            for (int j = 0; j < graph[malware].size(); j++) {
                if (initial_malware.find(j) != initial_malware.end()) {
                    continue;
                }
                if (graph[malware][j] == 1) {
                    root_to_malware[uf.root(j)].insert(malware);
                }
            }
        }

        map<int, int> malware_affection;
        for (const auto& [root, malwares] : root_to_malware) {
            if (malwares.size() == 1) {
                malware_affection[*malwares.begin()] += uf.getSize(root);
            }
        }

        int result = -1;
        int max_affection = -1;
        for (const auto& [malware, affect] : malware_affection) {
            if (affect > max_affection) {
                max_affection = affect;
                result = malware;
            }
        }

        return result == -1? *initial_malware.begin() : result;
    }
};
