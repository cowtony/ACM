class UnionFind {
public:
    UnionFind(int n) : father(n), size(n, 1) {
        for (int i = 0; i < father.size(); i++) {
            father[i] = i;
        }
        count = n;
    }
    void connect(int a, int b) {
        int ra = root(a);
        int rb = root(b);
        if (ra != rb) {
            size[rb] += size[ra];
            // TODO: process `data` here.
            father[ra] = rb;
            count--;
        }
    }
    int root(int a) {
        if (father[a] == a) { return a; } 
        else { return father[a] = root(father[a]); }
    }
    int getSize(int a) {
        return size[root(a)];
    }
    
    int count;
    vector<int> father;
    vector<int> size; // Store count of the component.
    vector<int> data; // Can add other data here.
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        sort(initial.begin(), initial.end());
        
        UnionFind uf(graph.size());
        for (int i = 0; i < graph.size(); i++) {
            for (int j = 0; j < graph[0].size(); j++) {
                if (graph[i][j] == 1) {
                    uf.connect(i, j);
                }
            }
        }
        unordered_map<int, vector<int>> count;
        for (int i : initial) {
            int root = uf.root(i);
            count[root].push_back(i);
        }
        int max_reduce = 0;
        int result = initial[0];
        for (auto [root, affected] : count) {
            if (affected.size() == 1) {
                int node = affected[0];
                int reduce = uf.getSize(node);
                if (reduce > max_reduce || (reduce == max_reduce && node < result)) {
                    max_reduce = reduce;
                    result = node;
                }
            }
        }
        return result;
    }
};
