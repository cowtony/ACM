class Trie {
  public:
    Trie() : children(26, nullptr) {}
    ~Trie() {
        for (Trie* child : children) {
            delete child;
        }
    }
    
    void insert(const string& word, const int data) {
        Trie* node = this;
        for (const char c : word) {
            if (!node->children.at(c - 'a')) {
                node->children[c - 'a'] = new Trie;
            }
            node = node->children.at(c - 'a');
            node->data.emplace_back(data);
        }
    }
    
    vector<int> getAllData(const string& prefix = "") const {
        const Trie* node = getNode(prefix);
        if (!node) {
            return {};
        }
        return node->data;
    }
    
  private:
    vector<Trie*> children;
    vector<int> data;
    
    const Trie* getNode(const string& prefix) const {
        const Trie* node = this;
        for (const char c : prefix) {
            if (!(node = node->children.at(c - 'a'))) {
                return nullptr;
            }
        }
        return node;
    }
};

class WordFilter {
  public:
    WordFilter(vector<string>& words) {
        for (int idx = 0; idx < words.size(); idx++) {
            forward_trie.insert(words[idx], idx);
            string reverse_wrod = words[idx];
            reverse(reverse_wrod.begin(), reverse_wrod.end());
            backward_trie.insert(reverse_wrod, idx);
        }
    }
    
    int f(string prefix, string suffix) {
        vector<int> forward_idx = forward_trie.getAllData(prefix);
        reverse(suffix.begin(), suffix.end());
        vector<int> backward_idx = backward_trie.getAllData(suffix);
        
        int f = forward_idx.size() - 1;
        int b = backward_idx.size() - 1;
        while (f >= 0 and b >= 0) {
            if (forward_idx[f] == backward_idx[b]) {
                return forward_idx[f];
            } else if (forward_idx[f] > backward_idx[b]) {
                f--;
            } else {
                b--;
            }
        }
        return -1;
    }
    
  private:
    Trie forward_trie, backward_trie;
};

/**
 * Your WordFilter object will be instantiated and called as such:
 * WordFilter* obj = new WordFilter(words);
 * int param_1 = obj->f(prefix,suffix);
 */
